hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params:
      epochs: '10'
      batch_size: '32'
      modelconf.layersconf.Conv2D_1.filters: 8,16,32
      modelconf.layersconf.Conv2D_2.filters: 8,16,32
      modelconf.layersconf.Conv2D_3.filters: 8,16,32
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - +experiments=3LayerConv
  job:
    name: TrainModel
    chdir: null
    override_dirname: +experiments=3LayerConv
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: C:\Users\alanc\OneDrive\Documents\Python Projects\DogWaterLevelDetector\ModelCreation
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: C:\Users\alanc\OneDrive\Documents\Python Projects\DogWaterLevelDetector\ModelCreation\config
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      experiments: 3LayerConv
      dataconf: data
      modelconf: 3LayerConv
      modelconf/regularizersconf: regularizers
      modelconf/layersconf: layers
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
modelconf:
  layersconf:
    input_layer:
      _target_: tensorflow.keras.layers.InputLayer
      input_shape: ${dataconf.input_shape_tuple}
      dtype: uint8
    rescaling_layer:
      _target_: tensorflow.keras.layers.Rescaling
      scale: ${eval:'1/255'}
    Conv2D_1:
      _target_: tensorflow.keras.layers.Conv2D
      filters: 16
      kernel_size: 3
      padding: same
      activation: relu
      kernel_regularizer: ${modelconf.regularizersconf.L1L2_regularizer}
    Conv2D_2:
      _target_: tensorflow.keras.layers.Conv2D
      filters: 32
      kernel_size: 3
      padding: same
      activation: relu
      kernel_regularizer: ${modelconf.regularizersconf.L1L2_regularizer}
    Conv2D_3:
      _target_: tensorflow.keras.layers.Conv2D
      filters: 64
      kernel_size: 3
      padding: same
      activation: relu
      kernel_regularizer: ${modelconf.regularizersconf.L1L2_regularizer}
    Flatten:
      _target_: tensorflow.keras.layers.Flatten
    MaxPooling2D:
      _target_: tensorflow.keras.layers.MaxPooling2D
    Dense128:
      _target_: tensorflow.keras.layers.Dense
      units: 128
      activation: relu
    Dropout:
      _target_: tensorflow.keras.layers.Dropout
      rate: 0
    Out_layer:
      _target_: tensorflow.keras.layers.Dense
      units: 2
      activation: sigmoid
  regularizersconf:
    L1L2_regularizer:
      _target_: tensorflow.keras.regularizers.L1L2
      l1: 0.0
      l2: 0.0
  layers:
  - ${modelconf.layersconf.input_layer}
  - ${modelconf.layersconf.rescaling_layer}
  - ${modelconf.layersconf.Conv2D_1}
  - ${modelconf.layersconf.MaxPooling2D}
  - ${modelconf.layersconf.Conv2D_2}
  - ${modelconf.layersconf.MaxPooling2D}
  - ${modelconf.layersconf.Conv2D_3}
  - ${modelconf.layersconf.MaxPooling2D}
  - ${modelconf.layersconf.Flatten}
  - ${modelconf.layersconf.Dense128}
  - ${modelconf.layersconf.Dropout}
  - ${modelconf.layersconf.Out_layer}
  layer_list:
    _target_: builtins.list
    _args_:
    - ${modelconf.layers}
  model:
    _target_: tensorflow.keras.models.Sequential
    layers: ${modelconf.layer_list}
dataconf:
  train_dataset: Data\Train
  validation_dataset: Data\Validation
  num_classes: 2
  input_shape:
  - 258
  - 258
  - 3
  input_shape_tuple:
    _target_: builtins.tuple
    _args_:
    - ${dataconf.input_shape}
epochs: 2
batch_size: 32
optimizer: adam
loss:
  _target_: tensorflow.keras.losses.SparseCategoricalCrossentropy
  from_logits: false
metrics:
- accuracy
metrics_list:
  _target_: builtins.list
  _args_:
  - ${metrics}
